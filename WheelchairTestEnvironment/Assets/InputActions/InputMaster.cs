//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/InputActions/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""bc666f94-be7a-4761-801f-cb3c3b8e00f6"",
            ""actions"": [
                {
                    ""name"": ""ViewAxis_Move"",
                    ""type"": ""Value"",
                    ""id"": ""a8a36317-4617-4a18-9530-106bdf01769f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""87c0e98c-a2b4-48cb-ad4d-fe48c95eeded"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tilt"",
                    ""type"": ""Value"",
                    ""id"": ""81012be5-2c57-4181-81e1-638ce8ff1bdb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftThumb"",
                    ""type"": ""Value"",
                    ""id"": ""36f2fedd-d95e-4aba-81b4-00ec6fcf91d2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightThumb"",
                    ""type"": ""Value"",
                    ""id"": ""b317bc40-0ac7-4bbc-b0e4-bbce9c79173c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""027b8c48-a3d2-40b3-9767-d7dbb5fd3980"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""ViewAxis_Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b272c94-38f0-412c-b03d-f8ade87ad24b"",
                    ""path"": ""<XInputController>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7fdc811-eab8-41a9-a986-cebb75d5fe30"",
                    ""path"": ""<XInputController>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4d53b92-23cd-4d6e-8454-d8274f7f3d05"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""LeftThumb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d894d3ec-da0c-48f1-8c1d-25783dccf71b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightThumb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox Control Scheme"",
            ""bindingGroup"": ""Xbox Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ViewAxis_Move = m_Player.FindAction("ViewAxis_Move", throwIfNotFound: true);
        m_Player_Turn = m_Player.FindAction("Turn", throwIfNotFound: true);
        m_Player_Tilt = m_Player.FindAction("Tilt", throwIfNotFound: true);
        m_Player_LeftThumb = m_Player.FindAction("LeftThumb", throwIfNotFound: true);
        m_Player_RightThumb = m_Player.FindAction("RightThumb", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_ViewAxis_Move;
    private readonly InputAction m_Player_Turn;
    private readonly InputAction m_Player_Tilt;
    private readonly InputAction m_Player_LeftThumb;
    private readonly InputAction m_Player_RightThumb;
    public struct PlayerActions
    {
        private @InputMaster m_Wrapper;
        public PlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @ViewAxis_Move => m_Wrapper.m_Player_ViewAxis_Move;
        public InputAction @Turn => m_Wrapper.m_Player_Turn;
        public InputAction @Tilt => m_Wrapper.m_Player_Tilt;
        public InputAction @LeftThumb => m_Wrapper.m_Player_LeftThumb;
        public InputAction @RightThumb => m_Wrapper.m_Player_RightThumb;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @ViewAxis_Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnViewAxis_Move;
                @ViewAxis_Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnViewAxis_Move;
                @ViewAxis_Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnViewAxis_Move;
                @Turn.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                @Tilt.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTilt;
                @Tilt.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTilt;
                @Tilt.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTilt;
                @LeftThumb.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftThumb;
                @LeftThumb.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftThumb;
                @LeftThumb.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftThumb;
                @RightThumb.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightThumb;
                @RightThumb.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightThumb;
                @RightThumb.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightThumb;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ViewAxis_Move.started += instance.OnViewAxis_Move;
                @ViewAxis_Move.performed += instance.OnViewAxis_Move;
                @ViewAxis_Move.canceled += instance.OnViewAxis_Move;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Tilt.started += instance.OnTilt;
                @Tilt.performed += instance.OnTilt;
                @Tilt.canceled += instance.OnTilt;
                @LeftThumb.started += instance.OnLeftThumb;
                @LeftThumb.performed += instance.OnLeftThumb;
                @LeftThumb.canceled += instance.OnLeftThumb;
                @RightThumb.started += instance.OnRightThumb;
                @RightThumb.performed += instance.OnRightThumb;
                @RightThumb.canceled += instance.OnRightThumb;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_XboxControlSchemeSchemeIndex = -1;
    public InputControlScheme XboxControlSchemeScheme
    {
        get
        {
            if (m_XboxControlSchemeSchemeIndex == -1) m_XboxControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Xbox Control Scheme");
            return asset.controlSchemes[m_XboxControlSchemeSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnViewAxis_Move(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnTilt(InputAction.CallbackContext context);
        void OnLeftThumb(InputAction.CallbackContext context);
        void OnRightThumb(InputAction.CallbackContext context);
    }
}
